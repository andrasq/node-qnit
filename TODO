- read cmdline options from test/qnit.opts? (like mocha, for eg -t 5000)

- report eg "var not defined" errors that occur inside tests (as opposed to MongoError: Connection Closed By Application)
  (also "call stack exceeded", which is what it was I believe)

- mocha runs each inner `describe` clause with its own copy of the surrounding scope ?!

- mocha compat: it.only to run only that test (ie, only those tagged "only")
- mocha compat: this.timeout() to control per-test timeout (non-enumerable `this` property)

- fixme: if test is ^Z suspended for more than 2000 (-t) milliseconds, the "did not call done" error is printed
  but the test is still run to completion, instead of being aborted

- mocha does not run calls below the `done()` (coculd run test in a try/catch, and throw a '__done__' flag)

+ fixme: node-v6 broke --fork-files (now need 'ipc' in the stdio descriptors array, else cannot .send() to)
- fixme: ifError() does not print the backtrace
- fix: ifError() should display the returned error, not a new error generated because it was truthy
- fixme: ifError() should not abort the process (should continue with the other tests)

- fixme: t.skip() in some cases prints 'uncaught error' but t.done() works ok
- fixme: unrequire breaks pushgateway test, but the in-lined unrequire works

- todo: --stack-trace-limit option to set Error.stackTraceLimit for longer backtraces (default is 10)
- todo: qnit.debug('label' [,level]) => returns a varargs console.log that prints if QNIT_DEBUG=foo,bar=2,label is set,
  else suppresses the output.  Note that leaving in debug() still spends time computing the arguments and making the call,
  but if it uses printf then could defer much of the string manipulation.
  qassert.debug? qprintf.debug? QPRINTF_DEBUG=label=2

- --full-trace option (like mocha) to not truncate backtraces.  See: Error.stackTraceLimit = Infinity;
  nb: maybe limit Error stack trace initially to 0 then grab an explicit stack?

- fixme: catch duplicate done() from before/after etc (before not being caught)
- mocha compat: support describe.skip(), context.skip(), it.skip()

- option (or default) to print dots per test run, do not print each test name.
  Maybe reset (and print name) of each test file, but print test name only on failure.
  (nb: this is a phpunit compat thing, in nodejs each test is printed on a separate line)

- setup/teardown: handle done(err) by logging error and unit test location (not "uncaught error" trace of internal location)
- mocha compat: fix: run all teardown functions even if one errors out; report all
- mocha compat: fix: tolerate teardown errors, report them but do not kill the test suite

- fixme: assertion error does not print the failing test name (it kills the program? "unexpected exit, tests not done")
  (see also above "ifError() does not print a backtrace")
  A: if the error happens in a callback, it is not caught by the tests' try/catch -- maybe set a global error listener?
- fixme: mocha compat: identical-named describe() tests do not run! (only the last one does)
